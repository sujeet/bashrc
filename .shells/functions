# # As of now, can't use the following because
# # tilda does not support it fully.
# function man() {
# 	env \
# 		LESS_TERMCAP_mb=$(printf "\e[1;31m") \
# 		LESS_TERMCAP_md=$(printf "\e[1;31m") \
# 		LESS_TERMCAP_me=$(printf "\e[0m") \
# 		LESS_TERMCAP_se=$(printf "\e[0m") \
# 		LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
# 		LESS_TERMCAP_ue=$(printf "\e[0m") \
# 		LESS_TERMCAP_us=$(printf "\e[1;32m") \
# 			man "$@"
# }

# Usage : 
# For example, if you want to execute command 
# "ls -l" if arch and 
# "ps aux" otherwise
# in shell type the following
# arch_or_not "ls -l" "ps aux"
function arch_or_not ()
{
    # First argument is the command to
    # execute if the os is arch linux
    # Otherwise the command passed as
    # second argument is executed.

    # Assuming the os is either Arch linux
    case $(uname -a) in
        *ARCH*) $1 ;;
        *)      $2 ;;
    esac
}

function install ()
{
    arch_command="sudo pacman -S $@"
    other_command="sudo apt-get install $@"
    arch_or_not "$arch_command" "$other_command"
}

function install-pkg ()
{
    # takes a path to the package as argument
    arch_command="sudo pacman -U $1"
    other_command="sudo dpkg -i $1"
    arch_or_not "$arch_command" "$other_command"
}

function uninstall ()
{
    arch_command="sudo pacman -Rns $@"
    other_command="sudo apt-get --purge remove $@"
    arch_or_not "$arch_command" "$other_command"
}

function search ()
{
    arch_command="pacman -Ss $1"
    other_command="apt-cache search $1"
    arch_or_not "$arch_command" "$other_command"
}

function update ()
{
    arch_command="sudo pacman -Syu"
    other_command="sudo apt-get update && sudo apt-get upgrade"
    arch_or_not "$arch_command" "$other_command"
}

function extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)  tar xjf    $1 ;;                             
            *.tar.gz)   tar xzf    $1 ;;                              
            *.bz2)      bunzip2    $1 ;;                         
            *.rar)      unrar x    $1 ;;                           
            *.gz)       gunzip     $1 ;;                           
            *.tar)      tar xf     $1 ;;                          
            *.tbz2)     tar xjf    $1 ;;                        
            *.tgz)      tar xzf    $1 ;;                         
            *.zip)      unzip      $1 ;;                           
            *.Z)        uncompress $1 ;;                                
            *)          echo "'$1' cannot be extracted via extract()" ;; 
        esac
    else
        echo "'$1' is not a valid file"
    fi
}


function psg() {
    if [ ! -z $1 ] ; then
        echo "Grepping for processes matching $1..."
        ps aux | grep $1 
    else
        echo "!! Need name to grep for"
    fi
}
